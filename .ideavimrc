" Set the mapleader.
" let mapleader="\"
map <Space> <Leader>
set showcmd

" / searches case-sensitive only if searching for capital letter
" * searches consistently case-sensitive.
set ignorecase
set smartcase

" Highlight search terms...
set hlsearch
set incsearch " ...dynamically as they are typed.

" Keep 3 lines below cursor instead of it being at bottom (default)
set scrolloff=1

" Increase command history from 20 (default) to 1000
set history=1000

" Disable bell
set visualbell
set noerrorbells

" Easy navigation of wrapped lines
"nnoremap j gj
"nnoremap k gk
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'

" Easy window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Clear highlighted searches
nnoremap <silent> <Leader>/ :nohlsearch<CR>

" Preserve IntelliJ search
nnoremap g/ :action Find<cr>
vnoremap g/ :action Find<cr>

" Consider various characters to be part of words
" See https://clojure.org/reference/reader#_symbols
set iskeyword+=*
set iskeyword+=+
set iskeyword+=!
set iskeyword+=-
set iskeyword+=_
set iskeyword+='
set iskeyword+=?
set iskeyword+=<
set iskeyword+=>
set iskeyword+==

" actions
nnoremap <Leader>q :action CloseContent<CR>
nnoremap <Leader>Q :action ReopenClosedTab<CR>
nnoremap <C-6> :action VimFilePrevious<CR>
nnoremap <Leader>e :action SearchEverywhere<CR>
nnoremap <Leader>f :action GotoFile<CR>
nnoremap <Leader>c :action GotoClass<CR>
nnoremap <Leader>t :action GotoSymbol<CR>
nnoremap <Leader>a :action GotoAction<CR>
nnoremap <Leader>B :action ToggleLineBreakpoint<CR>
" Cursive
nnoremap <Leader>w( :action :cursive.actions.paredit/wrap-paren<CR>
vnoremap <Leader>w( :action :cursive.actions.paredit/wrap-paren<CR>
nnoremap <Leader>w[ :action :cursive.actions.paredit/wrap-square<CR>
vnoremap <Leader>w[ :action :cursive.actions.paredit/wrap-square<CR>
nnoremap <Leader>w{ :action :cursive.actions.paredit/wrap-curly<CR>
vnoremap <Leader>w{ :action :cursive.actions.paredit/wrap-curly<CR>
nnoremap <Leader>w" :action :cursive.actions.paredit/wrap-quotes<CR>
vnoremap <Leader>w" :action :cursive.actions.paredit/wrap-quotes<CR>

" code navigation
nnoremap <Leader>] :action GotoImplementation<CR>
nnoremap <Leader>[ :action GotoSuperMethod<CR>
nnoremap <Leader>b :action GotoDeclaration<CR>
nnoremap <Leader>u :action FindUsages<CR>
nnoremap <Leader>gt :action GotoTest<CR>
nnoremap <Leader>k :action HighlightUsagesInFile<CR>
nnoremap \r :action RunClass<CR>
nnoremap \R :action Run<CR>
nnoremap \d :action DebugClass<CR>
nnoremap \D :action Debug<CR>

" Join via IDE -- I don't know what this is but the plugin showed a popup asking me to do it.
set ideajoin

" yank to system clipboard and make unnamed register (default for pasting) pull from system clipboard
set clipboard+=unnamedplus

" Emulated plugins
set surround
" Emulates vim-surround
" Commands: ys, cs, ds, S
set commentary
" Emulates commentary.vim
" Commands: gcc, gc + motion, v_gc
