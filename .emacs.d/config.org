#+TITLE: Cort's Emacs Config
#+AUTHOR: Cort Spellman
#+DESCRIPTION: Cort's Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :lexical t

* TABLE OF CONTENTS :toc:
- [[#things-that-arent-working][Things That Aren't Working]]
  - [[#evil-want-c-i-jump-seems-to-have-no-effect][evil-want-C-i-jump seems to have no effect]]
- [[#todo][Todo]]
  - [[#proper-fuzzy-matching-for-completion][Proper Fuzzy Matching For Completion]]
  - [[#show-signature-and-documentation-along-with-code-completion-candidates][Show signature and documentation along with code completion candidates.]]
  - [[#show-lsp-and-other-errors][Show LSP And Other Errors]]
  - [[#keybinding-equivalents-of-mine-in-neovim][Keybinding Equivalents Of Mine In Neovim]]
  - [[#highlight-occurrences-of-term-under-cursor][Highlight Occurrences Of Term Under Cursor]]
- [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#install-and-enable-elpaca][Install And Enable Elpaca]]
  - [[#install-use-package-support][Install use-package Support]]
  - [[#have-use-package-always-install-packages][Have use-package Always Install Packages]]
  - [[#set-up-dired-to-use-gls-on-mac][Set Up dired To Use gls On Mac]]
- [[#set-path-as-in-terminals][Set Path As In Terminals]]
- [[#backup-files][Backup Files]]
- [[#lock-files][Lock Files]]
- [[#evil-mode][Evil Mode]]
- [[#font][Font]]
  - [[#set-the-font-face][Set The Font Face]]
- [[#general-keybindings][General Keybindings]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#git-time-machine][Git Time Machine]]
- [[#modeline][Modeline]]
  - [[#turn-on-column-numbers][Turn On Column Numbers]]
  - [[#use-doom-modeline][Use doom-modeline]]
- [[#org-mode][Org Mode]]
  - [[#indentation][Indentation]]
  - [[#table-of-contents][Table Of Contents]]
  - [[#enable-org-bullets][Enable Org Bullets]]
  - [[#create-blocks-in-org-files][Create Blocks In Org Files]]
- [[#projects][Projects]]
- [[#text][Text]]
  - [[#replace-selection-by-typing-in-insertish-mode-instead-of-appending][Replace Selection By Typing In Insertish Mode Instead Of Appending]]
  - [[#modify-word-characters][Modify Word Characters]]
  - [[#rainbow-parentheses][Rainbow Parentheses]]
  - [[#highlight-todo-and-friends][Highlight TODO And Friends]]
  - [[#set-background-color-of-color-code-to-color-code][Set Background Color Of Color-Code to Color-Code]]
  - [[#insert-delimiters-as-pairs][Insert Delimiters As Pairs]]
- [[#theme][Theme]]
- [[#ui][UI]]
  - [[#stop-cursor-from-blinking][Stop Cursor From Blinking]]
  - [[#turn-off-startup-message][Turn Off Startup Message]]
  - [[#disable-scrollbars][Disable Scrollbars]]
  - [[#disable-toolbar][Disable Toolbar]]
  - [[#display-line-numbers-in-certain-modes][Display Line Numbers In Certain Modes]]
  - [[#dont-truncate-lines][Don't Truncate Lines]]
  - [[#scroll-with-cursor-one-line-at-a-time][Scroll With Cursor One Line At A Time]]
  - [[#close-minibuffer-with-single-press-of-escape][Close Minibuffer With Single Press Of escape]]
  - [[#set-up-icons][Set Up Icons]]
  - [[#add-icons-to-dired][Add Icons To dired]]
  - [[#add-icons-to-ibuffer][Add Icons To ibuffer]]
  - [[#search][Search]]
  - [[#completion][Completion]]
- [[#undo][Undo]]
  - [[#undo-limits][Undo Limits]]
  - [[#undo-fu-for-linear-normal-and-logical-undo--redo][undo-fu For Linear (normal and logical) undo / redo]]
  - [[#preserve-undo-history-across-emacs-sessions][Preserve Undo History Across Emacs Sessions]]
  - [[#undo-tree-vundo][Undo Tree (vundo)]]
- [[#which-key][Which Key]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#treesitter][Treesitter]]
  - [[#elixir][Elixir]]
  - [[#gleam][Gleam]]
  - [[#go][Go]]
  - [[#lua][Lua]]
  - [[#markdown][Markdown]]
  - [[#svelte][Svelte]]

* Things That Aren't Working
** evil-want-C-i-jump seems to have no effect
Workaround:

#+begin_src emacs-lisp
  (with-eval-after-load 'general
    (general-define-key
     :states '(motion)
     :keymaps 'override
     "C-i" 'evil-jump-forward))
#+end_src



* Todo
** Proper Fuzzy Matching For Completion
*** Corfu completion is generally useless.
** Show signature and documentation along with code completion candidates.
*** If I know what I need, then I don't need much of a list of candidates. If I don't know what I need, then I need more than just names.
** Show LSP And Other Errors
*** I want the errors shown in the buffer.
*** I don't want to _have to_ mouse hover.
*** I don't want to _have to_ bring up a separate buffer to see errors.
** Keybinding Equivalents Of Mine In Neovim
** Highlight Occurrences Of Term Under Cursor
*** lsp-mode provides this but the functionality should be provided by treesitter when LSP isn't running. Also, I should be able to use * to search for the term under the cursor to see all such terms and the highlighting should persist until I clear it. (This provides a textual fallback.)



* Elpaca Package Manager
** Install And Enable Elpaca

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Install use-package Support
The `:init` keyword executes code before a package is loaded. It accepts one or more forms, up to the next keyword.

The `:config` keyword executes code after a package is loaded. In cases where loading is done lazily, this execution is deferred until after the autoload occurs.

#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs
    :ensure nil
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    :config
    (setq ring-bell-function #'ignore)

    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

** Have use-package Always Install Packages
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src


** Set Up dired To Use gls On Mac
The Mac built-in `ls` doesn't support the `--dired` option so we use `gls` from GNU coreutils.

#+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/opt/homebrew/bin/gls"
          dired-listing-switches "-aBhl"))
#+end_src



* Set Path As In Terminals

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :after elpaca
    :config
    (when (memq window-system '(mac ns x))
      (message "Mac OS system; will call exec-path-from-shell-initialize")
      (exec-path-from-shell-initialize)
      (message "Did call exec-path-from-shell-initialize"))
    ;; (when (daemonp)
    ;;   (exec-path-from-shell-initialize))
    )
#+end_src



* Backup Files
Source: https://emacs.stackexchange.com/a/36

#+begin_src emacs-lisp
(let ((backup-dir "~/tmp/emacs/backups")
      (auto-saves-dir "~/tmp/emacs/auto-saves/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir))

(setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 5    ; keep some new versions
      kept-old-versions 2)   ; and some old ones, too
#+end_src



* Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-i-jump t
          evil-want-Y-yank-to-eol t
          evil-vsplit-window-right t
          evil-split-window-below t
          ;; https://evil.readthedocs.io/en/latest/settings.html#elispobj-evil-respect-visual-line-mode
          evil-respect-visual-line-mode t
          evil-undo-system 'undo-fu)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard
                                      dired
                                      elpaca
                                      git-timemachine
                                      ibuffer
                                      magit
                                      vc-annotate
                                      which-key))
    (evil-collection-init))

  (use-package evil-tutor)
#+end_src



* Font
** Set The Font Face

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "Monaco"
		      :height 140
		      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
		      :font "JetBrainsMono Nerd Font"
		      :height 140
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "Monaco"
		      :height 140
		      :weight 'medium)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "Monaco-14"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src



* General Keybindings
general.el is the keybinding-setting program

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :after evil
    :config
    (general-evil-setup)

    ;; Set space = "SPC" as global leader
    (general-create-definer cs/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ; set leader
      :global-prefix "M-SPC") ; access leader in insert mode

    (cs/leader-keys
      "c" '(:ignore t :wk "Emacs config")
      "c c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Open Emacs config")
      "c r" '((lambda ()
                (interactive)
                (load-file "~/.emacs.d/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload Emacs config"))

    (cs/leader-keys
      "h" '(:ignore t :wk "Help")
      "h b" '(describe-bindings :wk "Describe bindings")
      "h c" '(describe-command :wk "Display command")
      "h C" '(describe-char :wk "Describe character")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d d" '(view-emacs-debugging :wk "Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "Emacs manual")
      "h d n" '(view-emacs-news :wk "Emacs news")
      "h d p" '(view-emacs-problems :wk "Emacs problems")
      "h e" '(view-echo-area-messages :wk "Echo area messages")
      "h f" '(describe-function :wk "Describe function")
      "h F" '(describe-face :wk "Describe face")
      "h i" '(info :wk "Info")
      "h k" '(describe-key :wk "Describe key")
      "h l" '(view-lossage :wk "Recent keystrokes")
      "h m" '(describe-mode :wk "Describe mode")
      "h v" '(describe-variable :wk "Describe variable")
      "h w" '(where-is :wk "Keybinding for command"))

    (cs/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))

    (cs/leader-keys
      "e" '(:ignore t :wk "Eval")
      "e b" '(eval-buffer :wk "Eval buffer")
      "e f" '(eval-defun :wk "Eval defun")
      "e e" '(eval-last-sexp :wk "Eval last sexp")
      "e r" '(eval-region :wk "Eval region")
      "e :" '(eval-expression :wk "Eval expression"))

    (general-define-key
     :states 'normal
     :keymaps 'override
     "-" 'dired-jump)

    ;; Defining these in the (default) global keymap in addition to in
    ;; evil states, below, makes them work in ihelp buffers.
    (general-define-key
     "C-h" 'evil-window-left
     "C-j" 'evil-window-down
     "C-k" 'evil-window-up
     "C-l" 'evil-window-right)

    (general-define-key
     :states '(normal insert visual emacs)
     :keymaps 'override
     "C-h" 'evil-window-left
     "C-j" 'evil-window-down
     "C-k" 'evil-window-up
     "C-l" 'evil-window-right)
    )
#+end_src



* Git
** Magit

#+begin_src emacs-lisp
  (use-package magit
    :after (:all general evil-collection)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-bury-buffer-function #'magit-restore-window-configuration)
    (magit-no-confirm '(trash))
    (magit-section-initial-visibility-alist '((untracked . show)))

    :config
    (cs/leader-keys
      "g" '(:ignore t :wk "Git")
      "g g" '(magit-status :wk "Magit Status"))

    (general-define-key
     :states '(normal visual)
     :keymaps '(magit-mode-map magit-status-mode-map)
     "n" 'magit-section-forward
     "p" 'magit-section-backward))
#+end_src

** Git Time Machine

#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src



* Modeline
** Turn On Column Numbers

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src


** Use doom-modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :after nerd-icons
    :init
    (doom-modeline-mode 1)
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-buffer-file-name-style 'relative-from-project))
#+end_src



* Org Mode
** Indentation
Disable electric indent in org-mode.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+end_src



** Table Of Contents
Enable table of contents

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init
    (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable Org Bullets
org-bullets displays indented bullets in org outlines instead of sequences of asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Create Blocks In Org Files
Org-tempo is not a separate package but a module of org-mode that can be enabled. Org-tempo allows for `<s` followed by `TAB` to expand to a `begin_src` tag.
Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src


Prevents `<` from auto-pairing when electric-pair-mode is on.
Otherwise, org-tempo is broken when you try to type the above shortcuts.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src



* Projects
Tools to navigate projects and files within them.

#+begin_src emacs-lisp
  (use-package projectile
    :demand t
    :after general
    :init
    (setq projectile-project-search-path '("~/Projects"))

    :config
    (projectile-mode +1)
    (cs/leader-keys
      "p" '(projectile-command-map :wk "Projectile")))
#+end_src



* Text
** Replace Selection By Typing In Insertish Mode Instead Of Appending

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Modify Word Characters

#+begin_src emacs-lisp
  (defun consider-underscore-word-character ()
    (modify-syntax-entry ?_ "w"))

  (defun consider-hyphen-word-character ()
    (modify-syntax-entry ?- "w"))

  (add-hook 'text-mode-hook #'consider-underscore-word-character)
  (add-hook 'prog-mode-hook #'consider-underscore-word-character)
  (add-hook 'lisp-mode-hook #'consider-underscore-word-character)
#+end_src

** Rainbow Parentheses

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** Highlight TODO And Friends

#+begin_src emacs-lisp
  (use-package hl-todo
    :demand t
    :config
    (setq hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold)))

    :hook
    (org-mode . hl-todo-mode)
    (prog-mode . hl-todo-mode))

#+end_src

** Set Background Color Of Color-Code to Color-Code

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :demand t
    :hook
    (org-mode . rainbow-mode)
    (prog-mode . rainbow-mode))
#+end_src

** Insert Delimiters As Pairs

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src



* Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-bold t)
    (load-theme 'doom-one-light t)
    (doom-themes-org-config))
#+end_src



* UI
** Stop Cursor From Blinking

#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

** Turn Off Startup Message

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Disable Scrollbars

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

** Disable Toolbar

#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

** Display Line Numbers In Certain Modes

#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  prog-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Don't Truncate Lines

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Scroll With Cursor One Line At A Time
Instead of the default of half a screen at a time.
Note that 0 is the default, which makes Emacs scroll half a screen when point goes off-screen.

#+begin_src emacs-lisp
  (setq scroll-step 1
        scroll-conservatively 10000)
#+end_src

** Close Minibuffer With Single Press Of escape
By default, Emacs requires pressing "ESC" three times to escape-quit the minibuffer. Change this to one:
#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Set Up Icons

#+begin_src emacs-lisp
  (use-package nerd-icons
    :demand t)
#+end_src

** Add Icons To dired

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :after nerd-icons
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

** Add Icons To ibuffer

#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer
    :after nerd-icons
    :hook
    (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Search
*** recentf-mode
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

*** Consult (~ Telescope.nvim)
Note that we set `read-file-name-function` to `#'consult-find-file-with-preview` to show file previews when searching for files with the built-in consult-fd and consult-find, as per https://github.com/minad/consult/wiki#previewing-files-in-find-file.
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :after general
    :demand t
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook
    (completion-list-mode . consult-preview-at-point-mode)

    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.25
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    (setq consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --with-filename --line-number --search-zip --hidden --no-ignore-vcs --glob !.git --no-pcre2")
    (setq consult-fd-args "fd --color=never --no-ignore-vcs --hidden --exclude .git")

        ;;;###autoload
    (defun cs/consult-fd (&optional dir)
      "Search for files with `fd' in DIR by using fd to
      (synchronously) list all files in the directory and then filter
      the results using completing read (which I have using fzf).

      This is like telescope.nvim (though this is synchronous) and
      unlike the built-in `consult-fd` behavior, which uses `fd` for
      primary filtering and `completing-read` for secondary filtering.
      The latter approach is more powerful but this approach is what I
      want most of the time."
      (interactive)
      (pcase-let* ((`(,prompt ,paths ,dir) (consult--directory-prompt "Find file: " dir))
                   (default-directory dir)
                   (fd-command (append (consult--build-args consult-fd-args)
                                       `("--search-path" ,dir))))
        (find-file
         (consult--read
          (apply #'process-lines fd-command)
          :state (consult--file-preview)
          :prompt prompt
          :sort nil
          :require-match t
          :add-history (consult--async-split-thingatpt 'filename)
          :category 'file
          :history '(:input consult--find-history)))))

    ;; Show file previews when searching for files
    ;; See https://github.com/minad/consult/wiki#previewing-files-in-find-file
    (defun cs/consult-find-file-with-preview (prompt &optional dir default mustmatch initial pred)
      (interactive)
      (let ((default-directory (or dir default-directory))
            (minibuffer-completing-file-name t))
        (consult--read #'read-file-name-internal
                       :state (consult--file-preview)
                       :prompt prompt
                       :initial initial
                       :require-match mustmatch
                       :predicate pred)))

    (setq read-file-name-function #'cs/consult-find-file-with-preview)

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    (cs/leader-keys
      "SPC" '(consult-buffer :wk "Find buffer")
      "b b" '(consult-buffer :wk "Find buffer"))

    (cs/leader-keys
      "f" '(:ignore t :wk "Find")
      "f f" '(cs/consult-fd :wk "Find file")
      "f g" '(consult-git-grep :wk "Find file in Git")
      "f r" '(consult-recent-file :wk "Find recent file")
      "f s" '(consult-ripgrep :wk "Find search term in project"))

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)

    ;; Use consult to search emacs documentation.
    (defun consult-info-emacs ()
      "Search through Emacs info pages."
      (interactive)
      (consult-info "emacs" "efaq" "elisp" "cl" "compat"))

    (defun consult-info-org ()
      "Search through the Org info page."
      (interactive)
      (consult-info "org"))

    (defun consult-info-completion ()
      "Search through completion info pages."
      (interactive)
      (consult-info "vertico" "consult" "marginalia" "orderless" "embark"
                    "corfu" "cape" "tempel"))
    )
  #+end_src



** Completion
*** Fussy Ordering Engine With fzf Scoring
In Neovim the telesope package for finding, previewing, and selecting, with the telescope-fzf-native plugin for search result ranking, has been very good. The following allows us to use fzf for Emacs search result ranking.

#+begin_src emacs-lisp
  (use-package fussy
    :demand t
    :config
    (push 'fussy completion-styles)
    (setq
     ;; For example, project-find-file uses 'project-files which uses
     ;; substring completion by default. Set to nil to make sure it's using
     ;; flx.
     completion-category-defaults nil
     completion-category-overrides nil)

    ;:hook
    ;(corfu-mode . (lambda ()
    ;                (setq-local fussy-max-candidate-limit 5000
    ;                            fussy-default-regex-fn 'fussy-pattern-first-letter
    ;                            fussy-prefer-prefix nil)))
)

  (use-package fzf-native
    :after fussy
    :ensure
    (fzf-native
     :repo "dangduc/fzf-native"
     :host github
     :files (:defaults "bin"))

    :config
    (setq fussy-score-fn 'fussy-fzf-native-score)
    (fzf-native-load-dyn))
#+end_src

*** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :demand t
    :config
    (vertico-mode)

    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    )
#+end_src

*** Marginalia

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :demand t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    ;; :bind (:map minibuffer-local-map
    ;;        ("M-A" . marginalia-cycle))

    :config
    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

*** In-Buffer Completion

#+begin_src emacs-lisp
;  (use-package corfu
;    :custom
;    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
;    (corfu-auto t)                 ;; Enable auto completion
;    ;; (corfu-separator ?\s)          ;; Orderless field separator
;    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
;    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
;    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
;    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
;    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
;    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
;
;    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
;    ;; be used globally (M-/).  See also the customization variable
;    ;; `global-corfu-modes' to exclude certain modes.
;    :init
;    (global-corfu-mode))
;
;  (use-package cape
;    :init
;    ;; Add to the global default value of `completion-at-point-functions' which is
;    ;; used by `completion-at-point'.  The order of the functions matters, the
;    ;; first function returning a result wins.  Note that the list of buffer-local
;    ;; completion functions takes precedence over the global list.
;    (add-hook 'completion-at-point-functions #'cape-file)
;    (add-hook 'completion-at-point-functions #'cape-elisp-block)
;    ;; (add-hook 'completion-at-point-functions #'cape-history)
;    )
#+end_src

* Undo
This gets its own section because it's very important and I've struggled with buggy undo setups in the past.

** Undo Limits

#+begin_src emacs-lisp
  (setq undo-limit 67108864) ; 64mb.
  (setq undo-strong-limit 100663296) ; 96mb.
  (setq undo-outer-limit 1006632960) ; 960mb.
#+end_src

** undo-fu For Linear (normal and logical) undo / redo

#+begin_src emacs-lisp
  (use-package undo-fu
    :demand t)
#+end_src

** Preserve Undo History Across Emacs Sessions

#+begin_src emacs-lisp
  (use-package undo-fu-session
    :demand t
    :after undo-fu
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    (undo-fu-session-global-mode))
#+end_src

** Undo Tree (vundo)

#+begin_src emacs-lisp
  (use-package vundo
    :demand t
    :after undo-fu)
#+end_src


* Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :init
    (which-key-mode 1)

    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          ; which-key-add-column-padding 1
          ; which-key-max-display-columns nil
          ; which-key-min-display-lines 6
          ; which-key-side-window-slot -10
          ; which-key-side-window-max-height 0.25
          which-key-idle-delay 0.15
          ; which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " → "))
#+end_src



* Languages
** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :after general
    :hook
    ((dockerfile-mode . lsp)
     (elixir-ts-mode . lsp)
     (gleam-ts-mode . lsp)
     (go-ts-mode . lsp)
     (heex-ts-mode . lsp)
     (js-ts-mode . lsp)
     (lua-mode . lsp)
     (svelte-mode . lsp))

    :commands
    lsp

    :config
    (cs/leader-keys
      "l" '(:ignore t :wk "LSP")
      "l a" '(lsp-execute-code-action :wk "Code action")
      "l f" '(lsp-format-buffer :wk "Format buffer")
      "l =" '(lsp-format-region :wk "Format region")
      "l i" '(lsp-organize-imports :wk "Organize imports")
      "l I" '(lsp-describe-session :wk "LSP info"))

    (cs/leader-keys
      "r" '(:ignore t :wk "Rename")
      "r n" '(lsp-rename :wk "Rename symbol") ; TODO: Write changed buffers
                                          ;"r w" ' TODO: Rename word under cursor.
      )

    (general-define-key
     :states '(normal)
     :keymaps 'lsp-mode-map
     "g D" '(lsp-find-declaration :wk "Goto declaration")
     "g r" '(lsp-find-references :wk "Goto references")
     "g I" '(lsp-goto-implementation :wk "Goto implementation")
     "g p" '(lsp-goto-type-definition :wk "Goto type definition")
     "K" 'lsp-ui-doc-glance
     "M-k" 'lsp-describe-thing-at-point))

  (use-package lsp-ui
    :commands lsp-ui-mode)

;  (use-package consult-lsp
;    :after (:all consult lsp-mode))
#+end_src

** Treesitter

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install t)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** Elixir

#+begin_src emacs-lisp
  (use-package elixir-ts-mode)
#+end_src

** Gleam

#+begin_src emacs-lisp
  (use-package gleam-ts-mode
    :load-path "~/Projects/gleam-mode"
    :mode "\\.gleam\\'"
    :config
    (gleam-ts-install-grammar))
#+end_src

** Go

#+begin_src emacs-lisp
  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun cs/lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (with-eval-after-load 'lsp-mode
    (add-hook 'go-ts-mode-hook #'cs/lsp-go-install-save-hooks))

#+end_src

** Lua

#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

** Markdown
Use gfm-mode (GitHub Flavored Markdown) for README.md files.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init
    (setq markdown-command "multimarkdown"))
#+end_src

** Svelte

#+begin_src emacs-lisp
  (use-package svelte-mode)
#+end_src
